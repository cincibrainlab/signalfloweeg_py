# Load an Custom EEG files
**Source:** `signalfloweeg.io.load_eeg()`

`load_eeg()` loads an EEG file into an MNE object. 

This function is a wrapper for various custom import functions. It aims to enhance reproducibility and provide a consistent interface to the user. While the function returns a valid MNE EEG object, it may employ non-MNE functions or custom scripts to load the data.

## Usage

Importing raw EEG data can be challenging due to varying formats and channel montages. The `load_eeg()` function provides a consistent interface for users while allowing customization for each recording file. The function aims to create a valid MNE raw or epochs object with the correct channel montage and event markers.

Using file extensions alone is insufficient, as recordings with different channel counts may share the same extension. Users should provide the correct file type and channel montage when using `load_eeg()`.

### Assign Example Data Filenames

```{python}
#| output: false
#| eval: false

from signalfloweeg.utils import Catalog

# Load from userdata/ from github
cchmc_demo_data = Catalog("https://tinyurl.com/yfudj62c")

cchmc_proj_data = Catalog("https://tinyurl.com/4zte723j")

cchmc_proj_data.get_location('proj_ketamine')

cchmc_proj_data.get_dataset_type('proj_ketamine')

# Check if there is an associated FDT file
fdt_file_path, fdt_file_present = cchmc_demo_data.get_associated_fdt_file("demo_rest_state")
#if fdt_file_present:
#    print(f"Associated FDT file: {fdt_file_path}")
#else:
#    print("No associated FDT file found.")

# Retrieve the files for a specific dataset, optionally filtering by extension
dataset_files = cchmc_demo_data.get_filelist("demo_rest_state", extension=".set")
#for file_info in dataset_files:
#    print(f"Folder path: {file_info['folder_path']}")
#    print(f"File name: {file_info['file_name']}")
#    print(f"Extension: {file_info['extension']}")
#    print()


# Retrieve the files for a specific dataset, optionally filtering by extension
dataset_files = cchmc_proj_data.get_filelist("proj_fxschirpsource")
#for file_info in dataset_files:
#    print(f"Folder path: {file_info['folder_path']}")
#    print(f"File name: {file_info['file_name']}")
#    print(f"Extension: {file_info['extension']}")
#    print()


# Retrieve the files for a specific dataset, optionally filtering by extension
dataset_files = cchmc_proj_data.get_filelist("proj_fxschirpsource")
#for file_info in dataset_files:
#    print(f"Folder path: {file_info['folder_path']}")
#    print(f"File name: {file_info['file_name']}")
#    print(f"Extension: {file_info['extension']}")
#    print()

cchmc_proj_data.summarize_filelist()

cchmc_proj_data.create_yaml_template()


```

```

# EGI/MAGSTIM 128 Resting State Data
resting_raw = catalog["128_Rest_EyesOpen_D1004"]

# EGI/MAGSTIM 128 Auditory Evoked Potentials
erp_raw = catalog["128_Chirp_D0657"]

```

### load_eeg(): View Recording Types

Let's first see what recording types are available by running the function without any arguments.

```{python}
#| output: false
#| eval: false

from signalfloweeg.io import load_eeg

# No arguments to show recording types
load_eeg();

```

![If load_eeg without inputs an informational display will be presented](https://www.dropbox.com/scl/fi/keuls51ipvvifr254h60t/CleanShot-2024-03-11-at-12.42.30-2x.png?rlkey=9icyz9yzbwouicqmmki7tjqcx&raw=1)

## Example 1: Continuous EEG File
### Load Data
```{python}
#| output: false
#| eval: false

from signalfloweeg.io import load_eeg
resting_mne = load_eeg(resting_raw, "EGI_128_RAW")

import mne
import matplotlib

```

### Visualize Data

```{python}
#| output: false
#| eval: false
%matplotlib widget 

# Plot the data with custom options
resting_mne.plot(title="Import Resting file", lowpass=100, highpass=1, scalings=dict(eeg=20e-6), event_color="red", remove_dc=True, clipping=None, decim=3);

```

![Notebook view of imported raw data](https://www.dropbox.com/scl/fi/gi1tjs9sxm884yxukj9sc/CleanShot-2024-03-11-at-16.32.18-2x.png?rlkey=f3l94bcyo9f1nwc3zuopjo110&raw=1)


## Example 2: Event-Related Recordings

### Load data

```{python}
#| output: false
#| eval: false

from signalfloweeg.io import load_eeg
chirp_mne = load_eeg(erp_raw, "EGI_128_RAW")

```

### Retrieve event structure and plot data

```{python}
#| eval: false
#| output: false
%matplotlib notebook 

# (use widget for interactive plots)

# Retrieve Events Structure
events = mne.find_events(chirp_mne)

# Plot the data with custom options
chirp_mne.plot(title="Import ERP file", lowpass=100, scalings=dict(eeg=20e-6), event_color="red", remove_dc=True, clipping=None, decim=3, events=events);

```

![Notebook view of imported raw data with events](https://www.dropbox.com/scl/fi/d8iim34gaf1jhklpp5so7/CleanShot-2024-03-11-at-16.21.18-2x.png?rlkey=4suz67mg4g2qew3f0v164jd4r&raw=1)

## Example 3: EEGLAB SET File

We often use EEGLAB SET files following a raw import to store data and events. The key advantage is the many MATLAB based raw import tools for different EEG manufacturers. In addition, the SET file can store event markers and other metadata such as channel locations. MNE-Python can import EEGLAB SET files, but it is important to use either the "Raw" (continuous) or "Epochs" (event-related) data types.

### Load data

```{python}
#| output: false
#| eval: false
from signalfloweeg.io import load_eeg

# EEGLAB SET FILE (EPOCHED)
eeglab_set_epoched = catalog["demo_auditory_chirp"]
eeglab_mne_epoched = load_eeg(eeglab_set_epoched, "EEGLAB_EPOCHS_SET")

```

## Summary

The `load_eeg()` function provides a consistent interface for users to import EEG data into MNE objects. Custom import descriptions are located in a user editable YAML file in the `config` directory. Additional documentation will describe how to add custom import functions.